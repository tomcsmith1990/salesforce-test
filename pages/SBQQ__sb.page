<apex:page tabStyle="SBQQ__Quote__c" doctype="html-5.0" showHeader="{!(!$Setup.SBQQ__GeneralSettings__c.SBQQ__GlobalHeaderPermUsed__c || !$Permission.SBQQ__HideGlobalHeader) && formFactor == 'desktop'}" cache="true" standardStylesheets="false" controller="SBQQ.ServiceRouter" extensions="SBQQ.OAuthExtension,SBQQ.SettingsExtension,SBQQ.ThemeExtension">
	<apex:includeScript value="/support/console/42.0/integration.js"/>
	<style>
		body {
			overflow: hidden !important;
		}
		html body.sfdcBody {
			overflow-y: hidden !important;
		}

		.showTemplatePreviewMode::before {
			content: 'Previewing most recently used quote';
			display: inline-block;
			width: 100%;
			padding: 0.5rem 0 ;
			text-align: center;
			font-size: 1.6em;
			color: #16325c;
			background-color: #ffb75d;
			background-image: linear-gradient(45deg,rgba(0,0,0,.025) 25%,transparent 25%,transparent 50%,rgba(0,0,0,.025) 50%,rgba(0,0,0,.025) 75%,transparent 75%,transparent);
			background-size: 100px 100px;
			white-space: pre;
		}

		#bodyCell {
			position: relative;
			overflow: hidden;
			padding: 0px;
			display: inline-block;
			width: 100%;
			min-height: 500px;
		}

		#sidebarCell.sidebarCollapsed {
			padding-left: 0;
			width:1px;
		}
		.noSidebarCell.noSidebarCell {
			padding: 0;
		}
		#MoreTabs_Tab > #MoreTabs_List {
			z-index: 10;  // must be larger than fixed page header (tab overflow dropdown)
		}

		.sbPleaseWait{
			font-family: 'Salesforce Sans', 'Open Sans', Arial, sans-serif;
			font-size: 1.3rem;
			font-weight: 300;
			left: 0;
			line-height: 200px;
			margin-top: -100px;
			position: absolute;
			text-align: center;
			top: 50%;
			width: 100%;
		}

		iron-dropdown > #contentWrapper {
			min-width: 0;
		}
	</style>

	<script>
		!function(window){
			// Using a global for support is bad practice, but this is likely the best way to avoid code
			// duplication until we refactor the build pipeline.
			window.__webComponentsSupported = function() {
				return ('registerElement' in document
					&& 'import' in document.createElement('link')
					&& 'content' in document.createElement('template'))
			}

			!function supportBrowser(){
				// Only load webcomponents_lite when not supported
				if (!window.__webComponentsSupported()) {
					var wcPoly = document.createElement('script');
					wcPoly.src = '{!$Resource.webcomponents_lite}';
					document.head.appendChild(wcPoly);
				}

				// v1 implementers such as Safari currently have a small number of css bugs such as "::slotted"
				var v0Support = document.head.createShadowRoot;
				// var v1Support = document.head.attachShadow;

				if (v0Support) {
					window.Polymer = window.Polymer || {dom: 'shady', useNativeCSSProperties: true};
				} else {
					window.Polymer = window.Polymer || {dom: 'shady'};
				}
			}();
		}(this)
	</script>


	<!--
		Load order is very important for static resources:
		#1-2 [app_3rd => app_html]: Dependencies much be loaded first (Polyfills, Polymer & System.js)
		#3-5 [JS => JSQC => JSAR]: Main JS files can be loaded next. Ordered for best performance.
	-->
	<script src="{!$Resource.sb_app_3rd_js}" type="text/javascript"></script>
	<link id="sb_app_html_import" rel="import" href="{!$Resource.sb_app_html}"></link>
	<script src="{!$Resource.sb_app_js}" type="text/javascript"></script>
	<script src="{!$Resource.JSQC}" type="text/javascript"></script>
	<script src="{!$Resource.JSAR}" type="text/javascript" async="true"></script>

	<div id="pw" class="sbPleaseWait" style="display:none">{!$Label.lbl_please_wait}</div>

	<sb-page-container id="sbPageContainer"></sb-page-container>
	<div id="sb-app"></div>

	<script>
		!function(window) {
			var userSettings = {!userSettings};
			window.sb = window.sb || {};
			window.sb.vfSessionId = '{!$API.Session_Id}';
			window.sb.visibilityStateStart = document.visibilityState;
			window.sb.labels = <c:sb_labels />;
			window.sb.mode = Object.freeze({debugMode: userSettings['debugMode']});
			window.sb.pkgVersion = userSettings['pkgVersion'];
			window.sb.userSettings = userSettings;

			var _resourceId = '{!JSENCODE($CurrentPage.parameters.id)}',
				_newResourceId = '{!JSENCODE($CurrentPage.parameters.newid)}',
				resourceId = _resourceId ? _resourceId : _newResourceId,
				trimmedResourceId = resourceId.substring(0,15);

			var pleaseWait;

			function adjustBody() {
				var bodyCell = document.querySelector('#bodyCell');
				if(bodyCell) {
					var heightOffset = document.querySelector('#globalHeaderBar') ? 166 : 130;
					var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
					bodyCell.style.minHeight = (height - heightOffset) + 'px';
					var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
					bodyCell.style.maxWidth = (width - 12) + 'px';
				}
			}
			window.addEventListener('load', adjustBody);
			window.addEventListener('resize', adjustBody);

			function getRoute(editable) {
				if('{!JSENCODE($CurrentPage.parameters.selectContract)}' === 'true') {
					return getSelectContractRoute();
				} else {
					return getLineEditorRoute(editable);
				}
			}

			function getSelectContractRoute() {
				var action = '{!JSENCODE($CurrentPage.parameters.action)}';
				if(action) {
					var selectedAssetIds = '{!JSENCODE($CurrentPage.parameters.selectedAssetIds)}';
					return 'contract/lookup?accId=' + resourceId + '&action=' + action + '&selectedAssetIds=' + selectedAssetIds;
				} else {
					return resourceId ? 'contract/lookup?qId=' + resourceId : null;
				}
			}

			function getLineEditorRoute(editable) {
				if (!editable) {
					alert('{!JSENCODE($Label.msg_quote_already_fully_ordered)}');
					window.location = '/' + resourceId;
				}
				var cmd = '{!JSENCODE($CurrentPage.parameters.cmd)}' == '' ? '' : '&cmd={!JSENCODE($CurrentPage.parameters.cmd)}';
				return resourceId ? 'quote/le?qId=' + resourceId + cmd : null;
			}

			function createReadyPromise(name, condition) {
				return new Promise(function(resolve, reject) {
						function checkCondition(i) {
							if(condition()) {
								resolve();
							} else if(i < 100) {
								window.setTimeout(function() { checkCondition(++i) }, 100);
							} else {
								reject('TIMEOUT: ' + name + ' not ready after 10 seconds');
							}
						}
						checkCondition(0);
				})
			}

			var jsqcReady = createReadyPromise('JSQC', function() { return window.SB && window.SB.JSQC; });
			var jsarReady = createReadyPromise('JSAR', function() { return window.SB && window.SB.JSARServices; });

			function loadApp() {
				// map of urls to 3rd parties on filesystem not included in HTML import or ES6 import
				var libUrls = {
					intl: '{!URLFOR($Resource.sb_i18n_cldr)}'
				};
				// if user sets a theme, it is added
				if ('{!userTheme}') {
					var theme = document.querySelector('link#sb_app_html_import')
						.import.querySelector('dom-module#sb-common-styles template');
					var commonStyles = theme.content.querySelector('style');
					commonStyles.innerText += window.atob('{!userTheme}');
				}

				System.import('app.js').then(function (mod) {
					var sbPageContainer = document.querySelector('#sbPageContainer');
					var appReady = mod.App.init(sbPageContainer, null, userSettings, libUrls);
					Promise.all([appReady, jsqcReady, jsarReady]).then(function () {
						if (pleaseWait) clearTimeout(pleaseWait);

						// the default page to land the user on
						var HOME = '/product/search';
						document.querySelector('body').removeAttribute('unresolved');

						// clear the hash so in aloha you can refresh the page by reloading the URL
						var previous = window.location.hash;
						window.location.hash = '';
						var route = window.location.hash.length > 1 ? window.location.hash.slice(1) : (previous || getRoute(true) || HOME);

						sbPageContainer.route = route;
						document.querySelector('#pw').style.display = 'none';

						var themeDocId = '{!JSENCODE($CurrentPage.parameters.themeDocId)}';
						if (themeDocId) {
							sbPageContainer.classList.add('showTemplatePreviewMode');
						}
					});
				});
			}

			function queueAppLoad(){
				if (userSettings['inCommunity']) {
					window.addEventListener('load', function(){
						if (window.__webComponentsSupported()) {
							loadApp();
						} else {
							window.addEventListener('WebComponentsReady', loadApp);
						}
					});
				} else if (window.__webComponentsSupported()) {
					loadApp();
				} else {
					window.addEventListener('WebComponentsReady', loadApp);
				}
			}

			!function supportPlatform(){
				var mobileAgent = navigator.userAgent.match(/Tablet|iPad|iPod/i)
					|| navigator.userAgent.match(/Android/i)
					|| navigator.userAgent.match(/Mobi/i);
				var pcTabletAgent = navigator.userAgent.match(/Tablet PC/i);

				if(mobileAgent && !pcTabletAgent){
					document.querySelector('#pw').style.display = 'block';
				} else { // desktop
					document.querySelector('#sbPageContainer').classList.add('--desktop');
					pleaseWait = setTimeout(function() {
						document.querySelector('#pw').style.display = 'block';
					}, 1000);
				}
			}();

			// Need to escape the keys in labels map
			// Sb-i18n uses this.innerHTML which returns escaped characters when getting text to translate
			!function escapeLabelKeys() {
				for(var labelKey in window.sb.labels) {
					if(labelKey.includes('&') || labelKey.includes('<') || labelKey.includes('>')) {
						var escapedLabelKey = labelKey.replace(/&/g, '&amp' + ';').replace(/</g, '&lt' + ';').replace(/>/g, '&gt'  + ';');
						window.sb.labels[escapedLabelKey] = window.sb.labels[labelKey];
						delete window.sb.labels[labelKey];
					}
				}
			}();

			!function preload() {
				// This is duplicate code from RemoteSession.js & ConnectionClient.js.
				// Unforchenetly AppContext is not initialized at this stage, so this is required.
				var settings = userSettings;
				var conn = new window.jsforce.Connection({
					sessionId : window.sb.vfSessionId,
					version: '36.0',
					instanceUrl: settings.inCommunity ? settings.orgUrl : settings.orgInstanceUrl
				});

				Promise.all([
					jsqcReady,
					System.import('common/data/cache/Cache.js'),
					System.import('perfMetrics/MetricsService.js')])
					.then(function(imports){
						var quoteDAO = new window.SB.QuoteDAO(settings.developerPrefix, conn);
						var Cache = imports[1].Cache;
						var metricsService = new imports[2].MetricsService(conn.instanceUrl);
						var loadEditorModel = quoteDAO.loadEditorModel(trimmedResourceId);

						Cache.add('LineEditor', trimmedResourceId, loadEditorModel, 'promise');

						metricsService.startTransaction();

						document.addEventListener('click', function () {
							metricsService.startTransaction();
						}, true);
						document.addEventListener('sf-qle-data-changed', function(e) {
							var numLines = e.detail && e.detail.quote && e.detail.quote.lineItems ? e.detail.quote.lineItems.length : 0;
							metricsService.addExternalLogMetrics( { quoteLine: numLines } );
						}, true);

						queueAppLoad();
					});
			}();
		}(this);
	</script>

	<style>
		/* TODO: [Temporary pattern] This should be refactored when the bundling system is updated */
		@font-face {
			font-family: 'Salesforce Sans';
			src: url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Regular.woff2')}") format('woff2'),
				url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Regular.woff')}") format('woff');
			font-style: normal;
			font-weight: 400;
		}
		@font-face {
			font-family: 'Salesforce Sans';
			src: url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Light.woff2')}") format('woff2'),
			url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Light.woff')}") format('woff');
			font-style: normal;
			font-weight: 300;
		}
		@font-face {
			font-family: 'Salesforce Sans';
			src: url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Italic.woff2')}") format('woff2'),
				url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Italic.woff')}") format('woff');
			font-style: italic;
			font-weight: 300;
		}
		@font-face {
			font-family: 'Salesforce Sans';
			src: url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Bold.woff2')}") format('woff2'),
				url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-Bold.woff')}") format('woff');
			font-style: normal;
			font-weight: 700;
		}
		@font-face {
			font-family: 'Salesforce Sans';
			src: url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-BoldItalic.woff2')}") format('woff2'),
				url("{!URLFOR($Resource.salesforce_sans, 'SalesforceSans-BoldItalic.woff')}") format('woff');
			font-style: italic;
			font-weight: 700;
		}
	</style>
</apex:page>